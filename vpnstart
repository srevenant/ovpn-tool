#!/usr/bin/env python
# vim:set expandtab ts=4 sw=4 ai ft=python:
"""
Wrapper for openvpn in linux, also doing:

* variable keys 
* MFA
* better handling of dns options

"""

import sys
import os
import os.path
import re
import subprocess
import time
try:
    import requests
except:
    sys.exit("Unable to find 'requests' library, try:\n\tsudo pip install requests")
from multiprocessing import Process

VERSION = "1705.1708" #:VERSION:

# python 2/3 compat
try:
   input = raw_input
except NameError:
   pass

def which(file):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(os.path.join(path, file)):
            return os.path.join(path, file)
    return None

def fprint(fmt, *args):
    sys.stdout.write(fmt.format(*args))

def check_latest():
    # make request for latest version
    latest = os.path.expanduser("~/.ovpn/.latest")
    age = 365 * 24 # random age, 1 year old
    if os.path.exists(latest):
        # age in hours since now
        age = (time.time() - os.path.getmtime(latest)) / 60 / 60

    if age > 24:
        # last checked?
        gitraw = "https://raw.github.com/srevenant/ovpn-tool/master/"
        res = requests.get(gitraw + "ver")
        latest_ver = res.content
        if re.search(r'^\d+\.\d+$', latest_ver):
            with open(latest_ver, "w") as out:
                out.write(latest_ver)

    with open(latest) as infile:
        vers = infile.read().strip()

    if vers != VERSION:
        fprint("""
!! Version of vpnstart is out of date! ({} != {}) Try:

       curl -LOfs http://vpnstart.cold.org/get.sh && sudo bash ./get.sh

""".format(vers, VERSION))

# sudo
def run_as_root(key, cfg):
    if os.getuid() == 0:
        return

    # find the real base, for easier sudo rules
    owd = os.getcwd()
    script = os.path.basename(__file__)
    dirname = os.path.dirname(__file__)
    if not dirname:
        dirname = '.'
    os.chdir(dirname)
    basedir = os.getcwd()
    spath = basedir + "/" + script
    sudo = which("sudo")
    if not sudo:
        sys.exit("Cannot find 'sudo'")

    fprint("==> Switching to root with sudo...\n")
    os.execv(sudo, [sudo, spath, key, cfg])

def run(cmd):
    sys.stdout.flush()
    if type(cmd) == list:
        shell = False
    else:
        shell = True
    sub = subprocess.call(cmd, shell=shell)
    sys.stdout.flush()
    if sub:
        sys.exit(sub)

def get_key(cfgdir, keycfg):
    keys = set()
    for file in os.listdir(cfgdir):
        if file[-5:] == ".ovpn":
            keys.add(file[:-5])

    if not keycfg:
        if len(keys) == 1:
            fprint("No key specified, defaulting to {}", keys[0])
            return keys[0]
        sys.exit("Specify a key to use: " + ", ".join(list(keys)))
    if keycfg not in keys:
        sys.exit("Invalid key '" + keycfg + "', specify one of: " +
                 ", ".join(list(keys)))
    return keycfg

def terminal_title(title):
    fprint("\033]0;{}\007", title)

def readcmd(path, matches):
    cmdline = list()
    if not os.path.exists(path):
        return
    matched = False
    with open(path) as infile:
        for part in infile.read().split("\000"):
            if part:
                cmdline.append(part)
                if matches in part:
                    matched = True
    if matched:
        return cmdline

def cleanup(authfile, pcmd):
    try:
        time.sleep(10)
    except:
        pass
    pproc = "/proc/{}/cmdline".format(os.getppid())
    if os.path.exists(pproc):
        cmd = readcmd("/proc/{}/cmdline".format(os.getppid()), "openvpn")
        if cmd != pcmd:
            return
    else:
        for pid in os.listdir("/proc"):
            found = False
            cmd = readcmd("/proc/" + str(pid), "openvpn")
            if cmd == pcmd:
                return

    os.unlink(authfile)

def setup_auth():
    opt, fname = (sys.argv + [None, None])[1:3]

    if not fname:
        sys.exit("Syntax: vpnstart --newauth FILENAME")
    cfgdir = os.path.expanduser("~/.ovpn")
    if not os.path.exists(cfgdir):
        sys.exit("Cannot find ocnfig dir ~/.ovpn")
    os.chdir(cfgdir)

    fprint("\n==> Username: ")
    authuser = input()
    run("stty -echo")
    fprint("\n==> Password: ")
    authpass = input()
    fprint("\n")
    run("stty echo")
    with open(fname, "w") as outfile:
        outfile.write(authuser)
        outfile.write("\n")
        outfile.write(authpass + "%{OTP}\n")
    fprint("\n==> Encrypting, CHOOSE A STRONG PASSPHRASE\n")
    run("gpg -c " + fname)
    os.unlink(fname)

def main():
    check_latest()

    if len(sys.argv) > 1 and sys.argv[1] == "--newauth":
        return setup_auth()

    keycfg, cfgdir = (sys.argv + [None, None])[1:3]
    if not cfgdir:
        cfgdir = os.path.expanduser("~/.ovpn")
    if not os.path.exists(cfgdir):
        sys.exit("Cannot find config dir ~/.ovpn")

    key = get_key(cfgdir, keycfg)

    run_as_root(key, cfgdir)

    terminal_title("vpn." + key)

    # be certain /usr/local is in path
    os.environ['PATH'] = "/usr/local/sbin:/usr/local/bin:" + os.environ['PATH']
    os.chdir(cfgdir)

    # get the auth path
    authfile = None
    with open(key + ".ovpn") as cfg:
        for line in cfg:
            match = re.search(r'^\s*auth-user-pass\s*(.*)\s*$', line)
            if match:
                authfile = match.group(1)
                break
    if not authfile:
        sys.exit("Unable to find auth-user-pass in " + key + ".ovpn!")

    fprint("==> Auth Key credentials in ")
    run("gpg -d " + authfile + ".gpg > " + authfile + ".tmp")

    fprint("\n==> MFA Authentication\n\nEnter Security Code: ")
    otp = re.sub(r'[^0-9]', '', input())
    fprint("\r                    \r\n")

    with open(authfile + ".tmp") as infile, open(authfile, "w") as outfile:
        for line in infile:
            outfile.write(line.replace("%{OTP}", otp))

    os.unlink(authfile + ".tmp")

    cmd = [which("openvpn"), "--config", key + ".ovpn"]

    proc = Process(target=cleanup, args=(authfile, cmd))
    proc.start()

    print(">>> " + " ".join(cmd) + "\n")
    os.execv(cmd[0], cmd)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        run("stty echo")
        pass

