#!/usr/bin/env python
# vim:set expandtab ts=4 sw=4 ai ft=python:
"""
Wrapper for openvpn in linux, also doing:

* variable keys 
* MFA
* better handling of dns options

"""

import sys
import os
import os.path
import re
import subprocess
import time
import tempfile
import shutil
try:
    import requests
except:
    sys.exit("Unable to find 'requests' library, try:\n\tsudo pip install requests")
from multiprocessing import Process

CLEANUP = []

VERSION = "1711.1413" #:VERSION:

# python 2/3 compat
try:
   input = raw_input
except NameError:
   pass

def my_exit(*status):
    for f in CLEANUP:
        if os.path.exists(f):
            try:
                os.unlink(f)
            except Exception as err:
                print("cannot unlink: " + str(err))
    sys.exit(*status)

def syntax(*args):
    sys.stderr.write("""
Syntax: vpnstart {config}
        vpnstart --newauth|--auth|-a {~/.ovpn/auth-config-file.gpg}
        vpnstart --version|-v

""")

    if args:
        sys.stderr.write("! " + args[0] + "\n\n")
    my_exit(1)

def which(file):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(os.path.join(path, file)):
            return os.path.join(path, file)
    return None

def fprint(fmt, *args):
    sys.stdout.write(fmt.format(*args))

def check_latest(force=False):
    # make request for latest version
    latest_path = ''
    if os.environ.get('SUDO_USER'):
        latest_path = "~" + os.environ['SUDO_USER'] + "/.ovpn/.latest"
    else:
        latest_path = "~/.ovpn/.latest"
    latest_path = os.path.expanduser(latest_path)
    age = 365 * 24 # random age, 1 year old
    if os.path.exists(latest_path):
        # age in hours since now
        age = (time.time() - os.path.getmtime(latest_path)) / 60 / 60

    if force or age > 24:
        # last checked?
        gitraw = "https://raw.github.com/srevenant/ovpn-tool/master/"
        res = requests.get(gitraw + "ver")
        latest_ver = res.content
        if re.search(r'^\d+\.\d+$', latest_ver):
            with open(latest_path, "w") as out:
                out.write(latest_ver)

    with open(latest_path) as infile:
        vers = infile.read().strip()

    if vers != VERSION:
        fprint("""
!! Version of vpnstart is out of date! (latest={} != current={}) Try:

       curl -LOfs http://vpnstart.cold.org/get.sh && sudo bash ./get.sh

""".format(vers, VERSION))

# sudo
def run_as_root(key, cfg):
    if os.getuid() == 0:
        return

    # find the real base, for easier sudo rules
    owd = os.getcwd()
    script = os.path.basename(__file__)
    dirname = os.path.dirname(__file__)
    if not dirname:
        dirname = '.'
    os.chdir(dirname)
    basedir = os.getcwd()
    spath = basedir + "/" + script
    sudo = which("sudo")
    if not sudo:
        syntax("Cannot find 'sudo'")

    fprint("==> Switching to root with sudo...\n")
    os.execv(sudo, [sudo, spath, key, cfg])

def run(cmd):
    sys.stdout.flush()
    if type(cmd) == list:
        shell = False
    else:
        shell = True
    sub = subprocess.call(cmd, shell=shell)
    sys.stdout.flush()
    if sub:
        my_exit(sub)

def get_key(cfgdir, keycfg):
    keys = set()
    for file in os.listdir(cfgdir):
        if file[-5:] == ".ovpn":
            keys.add(file[:-5])

    if not keycfg:
        if len(keys) == 1:
            fprint("No key specified, defaulting to {}", keys[0])
            return keys[0]
        syntax("Specify a config to use: " + ", ".join(list(keys)))
    if keycfg not in keys:
        syntax("Invalid config '" + keycfg + "', specify one of: " +
               ", ".join(list(keys)))
    return keycfg

def terminal_title(title):
    fprint("\033]0;{}\007", title)

def readcmd(path, matches):
    cmdline = list()
    if not os.path.exists(path):
        return
    matched = False
    with open(path) as infile:
        for part in infile.read().split("\000"):
            if part:
                cmdline.append(part)
                if matches in part:
                    matched = True
    if matched:
        return cmdline

def cleanup(authfile, pcmd):
    try:
        time.sleep(10)
    except:
        pass
#    pproc = "/proc/{}/cmdline".format(os.getppid())
#    if os.path.exists(pproc):
#        cmd = readcmd("/proc/{}/cmdline".format(os.getppid()), "openvpn")
#        if cmd != pcmd:
#            return
#    else:
#        for pid in os.listdir("/proc"):
#            found = False
#            cmd = readcmd("/proc/" + str(pid), "openvpn")
#            if cmd == pcmd:
#                return
#
    my_exit()

def setup_auth(*auth):
    if not auth:
        syntax("Please specify an auth gpg file")

    cfgdir = os.path.expanduser("~/.ovpn/")
    if not os.path.exists(cfgdir):
        syntax("Cannot find config dir ~/.ovpn/")

    os.chdir(cfgdir)

    clen = len(cfgdir)
    fname = auth[0]
    if fname[:clen] == cfgdir:
        fname = fname[clen:]

    if fname[-4:] != ".gpg":
        fname += ".gpg"

    if not os.path.exists(fname):
        print("Creating new auth file: " + fname)
        time.sleep(2)

    # now take off the .gpg
    fname = fname[:-4]

    print("auth-user-pass file: {}".format(fname))

    fprint("\n==> Username: ")
    authuser = input()
    run("stty -echo")
    fprint("\n==> Password: ")
    authpass = input()
    fprint("\n")
    run("stty echo")

    if os.path.exists(fname):
        os.unlink(fname)
    if os.path.exists(fname + ".gpg"):
        os.unlink(fname + ".gpg")

    with open(fname, "w") as outfile:
        outfile.write(authuser)
        outfile.write("\n")
        outfile.write(authpass + "%{OTP}\n")
    fprint("\n==> Encrypting, CHOOSE A STRONG PASSPHRASE\n")
    run("gpg -c " + fname)
    os.unlink(fname)

def prep_authfile(config):
    cfile = tempfile.NamedTemporaryFile(dir=".", delete=False, prefix=".tmp.")
    CLEANUP.append(cfile.name)
    authfile = None
    authmatch = ''
    with open(config + ".ovpn") as cfg:
        for line in cfg:
            match = re.search(r'^\s*auth-user-pass\s*(.*)\s*$', line)
            if match:
                authmatch = match.group(1)
                afile = tempfile.NamedTemporaryFile(dir=".", delete=True, prefix=".tmp.")
                authfile = afile.name
                # we just need the name
                shutil.copyfile(authmatch + ".gpg", authfile + ".gpg")
                line = "auth-user-pass " + authfile + "\n"
                CLEANUP.append(authfile)
                CLEANUP.append(authfile + ".gpg")
            cfile.write(line)
    if not authfile:
        syntax("Unable to find auth-user-pass in " + config + ".ovpn!")
    return cfile.name, authfile, authmatch

def main():
    check_latest()

    if len(sys.argv) > 1:
        if sys.argv[1] in ["--newauth", "--auth", "-a"]:
            return setup_auth(*sys.argv[2:])
        elif sys.argv[1] in ["--help", "-h"]:
            return syntax()
        elif sys.argv[1] in ["--version", "-v"]:
            return syntax("VERSION=" + VERSION)

    keycfg, cfgdir = (sys.argv + [None, None])[1:3]
    if not cfgdir:
        cfgdir = os.path.expanduser("~/.ovpn")
    if not os.path.exists(cfgdir):
        syntax("Cannot find config dir ~/.ovpn")

    key = get_key(cfgdir, keycfg)

    run_as_root(key, cfgdir)

    terminal_title("vpn." + key)

    # be certain /usr/local is in path
    os.environ['PATH'] = "/usr/local/sbin:/usr/local/bin:" + os.environ['PATH']
    os.chdir(cfgdir)
    os.umask(077)

    # get the auth path
    cfgfile, authfile, authorigin = prep_authfile(key)

    fprint("==> Auth Key credentials in ")
    CLEANUP.append(authfile + ".tmp")
    run("gpg -d " + authfile + ".gpg > " + authfile + ".tmp")

    with open(authfile + ".tmp") as authf:
        line1 = authf.readline()
        line2 = authf.readline()
        fprint("\n==> Using " + authorigin + " credentials:\n")
        fprint("\n\tUsername: {}", line1)
        if len(line2) < 7:
            fprint("\tWARNING: Password might be too small!\n")

    fprint("\n==> MFA Authentication\n\nEnter Security Code: ")
    otp = re.sub(r'[^0-9]', '', input())
    fprint("\r                    \r\n")

    with open(authfile + ".tmp") as infile, open(authfile, "w") as outfile:
        for line in infile:
            outfile.write(line.replace("%{OTP}", otp))

    os.unlink(authfile + ".tmp")

    cmd = [which("openvpn"), "--config", cfgfile]

    proc = Process(target=cleanup, args=(authfile, cmd))
    proc.start()

    print(">>> " + " ".join(cmd) + "\n")
    os.execv(cmd[0], cmd)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        run("stty echo")
        pass
    my_exit()

